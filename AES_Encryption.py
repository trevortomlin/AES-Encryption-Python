import secrets
import numpy as np

sbox = [
		[0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
		[0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
		[0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
		[0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
		[0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
		[0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
		[0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
		[0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
		[0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
		[0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
		[0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
		[0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
		[0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
		[0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
		[0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
		[0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
		]

sboxInv = [
		[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
		[0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
		[0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
		[0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
		[0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
		[0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
		[0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
		[0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
		[0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
		[0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
		[0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
		[0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
		[0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
		[0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
		[0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
		[0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
		]

class AES_Encryption():

	numOfRounds = 10

	def __init__(self):
		self.key = self.generateInitialKey()
		self.listofKeys = np.ndarray((11,4,4), np.int32)

	def stateToString(self, state):
		out = ""

		for col in range(len(state[0])):

			for row in range(len(state)):

				out += str(state[col][row])

				out += " "

		return out


	def encrypt(self, message):
		states = self.generateBlock(message)

		print("Original:")
		#print(states[0])
		print(self.stateToString(states[0]))


		key = self.key

		self.listofKeys[0] = key

		states[0] = self.addRoundKey(states[0], key)

		for x in range(0, self.numOfRounds-1):
			
			key = self.expandKey(key, x)
			self.listofKeys[x+1] = key
			
			states[0] = self.do_encryption_round(states[0], x, key)
			
		key = self.expandKey(key, 9)
		self.listofKeys[10] = key
	
		states[0] = self.do_encryption_final_round(states[0], key)

		print("\nEncrypted:")
		print(self.stateToString(states[0]))
		#print(states[0])

		self.cyphertext = states[0]

	def decrypt(self):

		key = self.listofKeys[-1]

		ct = self.cyphertext

		ct = self.do_decryption_final_round(ct, 9, key)
		
		for x in range(self.numOfRounds-1, 0, -1):
			key = self.listofKeys[x]
			ct = self.do_decryption_round(ct, x, key)


		key = self.listofKeys[0]
		ct = self.addRoundKey(ct, key)

		print("\nDecrypted:")
		print(self.stateToString(ct))

	def do_decryption_round(self, state, i, key):

		state = self.addRoundKey(state, key)
		state = self.invMixColumns(state)

		state = self.invShiftRows(state)
		state = self.invSubBytes(state)

		return state

	def do_decryption_final_round(self, state, i, key):

		state = self.addRoundKey(state, key)

		state = self.invShiftRows(state)
		state = self.invSubBytes(state)

		return state
		

	def do_encryption_round(self, state, i, key):
		state = self.subBytes(state)
		state = self.shiftRows(state)	
		state = self.mixColumns(state)

		state = self.addRoundKey(state, key)
		return state

	def do_encryption_final_round(self, state, key):
		state = self.subBytes(state)
		state = self.shiftRows(state)

		state = self.addRoundKey(state, key)
		return state	

	def generateInitialKey(self):
		#self.key = bytearray(secrets.token_bytes(16))
		key = list("Thats my Kung Fu".encode('utf-8'))

		key = np.reshape(key, (4, 4))
		key = np.transpose(key)

		return key

	def g(self, word, roundnum):

		word = np.roll(word, -1)

		for x, byte in enumerate(word):

			highnibble = (byte >> 4) & 0x0F
			lownibble = byte & 0x0F

			word[x] = sbox[highnibble][lownibble]

		rcon = self.generateRcon(roundnum)

		for x in range(len(word)):

			if x == 0:
				word[x] = word[x] ^ rcon
			else:
				word[x] = word[x] ^ 0


		return word

	def expandKey(self, key, roundnum):

		w3 = key[:, 3:4]
		w3 = np.reshape(w3, (4))

		w3 = self.g(w3, roundnum)
		w3 = np.reshape(w3, (4, 1))

		w4 = key[:, 0:1]

		w4 = w4 ^ w3
		w5 = w4 ^ key[:, 1:2]
		w6 = w5 ^ key[:, 2:3]
		w7 = w6 ^ key[:, 3:4]

		key[:, 0:1] = w4
		key[:, 1:2] = w5
		key[:, 2:3] = w6
		key[:, 3:4] = w7

		return key

	def generateBlock(self, string):

		#padding if string < block size (16 bytes)
		while (len(string) % 16 != 0):
			string += '0'

		
		state = bytearray(string.encode('utf-8'))

		state = np.reshape(state, (-1, 4, 4))
		state = np.transpose(state, (0, 2, 1))

		return state

	def generateRcon(self, i):

		if (i == 0):
			rcon = 1
			
			return rcon
		else:
			rcon = 1	

			for r in range(i):
				rcon = self.mul2(rcon)
			
			return rcon

	def subBytes(self, state):

		for col in range(len(state)):

			for row in range(len(state)):

				byte = state[row][col]

				highnibble = (byte >> 4) & 0x0F
				lownibble = byte & 0x0F



				state[row][col] = sbox[highnibble][lownibble]

		return state

	def invSubBytes(self, state):

		for col in range(len(state)):

			for row in range(len(state)):

				byte = state[row][col]

				highnibble = (byte >> 4) & 0x0F
				lownibble = byte & 0x0F

				state[row][col] = sboxInv[highnibble][lownibble]

		return state

	def shiftRows(self, state):

		for x in range(len(state)):

			state[x] = np.roll(state[x], -x)

		return state

	def invShiftRows(self, state):

		for x in range(len(state)):

			state[x] = np.roll(state[x], x)

		return state

	def mul2(self, v):
		# Multiply by 2
		s = v << 1

		s &= 0xff

		# Check if high bit before shift was 1
		# and xor with x^8 + x^4 + x^3 + x + 1 to make the result 8 bits in length
		if (v & 128) != 0:
			s = s ^ 0x1b

		return s

	def mul3(self, v):
		return self.mul2(v) ^ v

	def mixColumns(self, state):
		
		for x in range(len(state)):

			col = state[:, x:x+1]

			colcopy = col.copy()

			colcopy[0] = self.mul2(col[0]) ^ self.mul3(col[1]) ^ col[2] ^ col[3]
			colcopy[1] = col[0] ^self. mul2(col[1]) ^ self.mul3(col[2]) ^ col[3]
			colcopy[2] = col[0] ^ col[1] ^ self.mul2(col[2]) ^ self.mul3(col[3])
			colcopy[3] = self.mul3(col[0]) ^ col[1] ^col[2] ^  self.mul2(col[3])

			state[:, x:x+1] = colcopy.copy()

		return state
			
	def invMixColumns(self, state):
		state = self.mixColumns(state)
		state = self.mixColumns(state)
		state = self.mixColumns(state)

		return state

	def addRoundKey(self, state, key):
		
		state = state ^ key

		return state